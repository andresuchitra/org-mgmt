// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/andresuchitra/org-mgmt/models"
	mock "github.com/stretchr/testify/mock"
)

// CommentRepository is an autogenerated mock type for the CommentRepository type
type CommentRepository struct {
	mock.Mock
}

// CreateCommentByOrganizationID provides a mock function with given fields: ctx, organizationID, authorID, comment
func (_m *CommentRepository) CreateCommentByOrganizationID(ctx context.Context, organizationID uint, authorID uint, comment string) error {
	ret := _m.Called(ctx, organizationID, authorID, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint, string) error); ok {
		r0 = rf(ctx, organizationID, authorID, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCommentsByOrgID provides a mock function with given fields: ctx, id
func (_m *CommentRepository) GetCommentsByOrgID(ctx context.Context, id uint) ([]models.Comment, error) {
	ret := _m.Called(ctx, id)

	var r0 []models.Comment
	if rf, ok := ret.Get(0).(func(context.Context, uint) []models.Comment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDeleteCommentsByOrganizationID provides a mock function with given fields: ctx, organizationID
func (_m *CommentRepository) SoftDeleteCommentsByOrganizationID(ctx context.Context, organizationID uint) error {
	ret := _m.Called(ctx, organizationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) error); ok {
		r0 = rf(ctx, organizationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
